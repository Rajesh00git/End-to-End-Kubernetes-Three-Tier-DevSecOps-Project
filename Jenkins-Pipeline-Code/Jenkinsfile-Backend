pipeline {
    agent any 

    tools {
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
        GIT_USER_NAME = "Rajesh00git"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                git credentialsId: 'GITHUB', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=backend \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://54.90.165.231:9000 \
                          -Dsonar.login=squ_e0e206f52511d2258a574d5ddb3477a9e7754389'''
                    }
                }
            }
        }

        // stage('Quality Gate Check') {
        //     steps {
        //         script {
        //             timeout(time: 5, unit: 'MINUTES') {
        //                 waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
        //             }
        //         }
        //     }
        // }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('Application-Code/backend') {
                    sh '''
                        docker system prune -f
                        docker container prune -f
                        docker build -t ${AWS_ECR_REPO_NAME} .
                    '''
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} \
                        | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        
                        docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Update Deployment YAML') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "rajeshsahu7978@gmail.com"
                            git config user.name "Rajesh00git"

                            imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                            sed -i "s/${AWS_ECR_REPO_NAME}:\\${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml

                            git add deployment.yaml
                            if git diff --cached --quiet; then
                                echo "No changes to commit."
                            else
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
                            fi
                        '''
                    }
                }
            }
        }
    }
}
